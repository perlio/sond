/*
zond (treeviews.c) - Akten, Beweisstücke, Unterlagen
Copyright (C) 2020  pelo america

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/


#include <gtk/gtk.h>
#include <mupdf/fitz.h>

#include "treeviews.h"
#include "project.h"

#include "../global_types.h"
#include "../zond_tree_store.h"
#include "../zond_dbase.h"
#include "../zond_treeview.h"
#include "../zond_pdf_document.h"

#include "../99conv/pdf.h"

#include "../../misc.h"
#include "../../dbase.h"


/** Wenn Fehler: -1
    Wenn Vorfahre Datei ist: 1
    ansonsten: 0 **/
gint
treeviews_hat_vorfahre_datei( Projekt* zond, GtkTreeIter* iter, gboolean child, gchar** errmsg )
{
    GtkTreeIter iter_test = { 0 };
    gboolean success = TRUE;

    iter_test = *iter;

    do
    {
        gint rc = 0;
        gint node_id = 0;

        if ( !child )
        {
            GtkTreeIter iter_parent = { 0 };

            success = gtk_tree_model_iter_parent( GTK_TREE_MODEL(zond_tree_store_get_tree_store( &iter_test )), &iter_parent, &iter_test );

            if ( !success ) break;

            iter_test = iter_parent;
        }

        child = FALSE;

        gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), &iter_test, 2, &node_id, -1 );
        rc = zond_dbase_get_fundstelle( zond->dbase_zond->zond_dbase_work,
                node_id, NULL, NULL, NULL, errmsg );
        if ( rc == -1 ) ERROR_S
        else if ( rc > 0 ) return 1;
    } while ( 1 );

    return 0;
}


gint
treeviews_get_treeview_and_node_id( Projekt* zond, GtkTreeIter* iter, GtkWidget** treeview,
        gint* node_id )
{
    GtkTreeIter iter_orig = { 0, };
    ZondTreeStore* tree_store = NULL;

    zond_tree_store_get_target( iter, &iter_orig );
    tree_store = zond_tree_store_get_tree_store( &iter_orig );

    if ( tree_store == ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(zond->inhalt) )) ) *treeview = zond->inhalt;
    else if ( tree_store == ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(zond->auswertung) )) ) *treeview = zond->auswertung;
    else return 1;

    gtk_tree_model_get( GTK_TREE_MODEL(tree_store), &iter_orig, 2, node_id, -1 );

    return 0;
}


gint
treeviews_get_node_id( ZondTreeStore* tree_store_anchor, GtkTreeIter* iter_anchor )
{
    gint node_id = 0;

    if ( iter_anchor ) gtk_tree_model_get( GTK_TREE_MODEL(tree_store_anchor), iter_anchor, 2,
            &node_id, -1 );
    else node_id = zond_tree_store_get_root_id( tree_store_anchor );

    return node_id;
}


gint
treeviews_knoten_verschieben( Projekt* zond, GtkTreeIter* iter_src,
        ZondTreeStore* tree_store_anchor, GtkTreeIter* iter_anchor,
        gboolean child, GtkTreeIter* iter_cur, gchar** errmsg )
{
    gint rc = 0;
    gint node_id_src = 0;
    gint anchor_id = 0;
    gint parent_id = 0;
    gint older_sibling_id = 0;

    gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter_src )), iter_src, 2, &node_id_src, -1 );

    anchor_id = treeviews_get_node_id( tree_store_anchor, iter_anchor );
    if ( iter_anchor ) zond_dbase_get_node( zond->dbase_zond->zond_dbase_work,
            anchor_id, &parent_id, &older_sibling_id, NULL, NULL, NULL, NULL, NULL, errmsg );
    else parent_id = anchor_id;

    rc = zond_dbase_begin( zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_S

    //kind verschieben
    rc = zond_dbase_verschieben_knoten( zond->dbase_zond->zond_dbase_work,
            node_id_src, parent_id, older_sibling_id, errmsg );
    if ( rc ) ERROR_S

    //iter_dest bleibt verschobener Knoten
    zond_tree_store_move_node( iter_src, iter_anchor, child );

    rc = zond_dbase_commit( zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

    if ( iter_cur ) *iter_cur = *iter_src;

    return 0;
}


static gint
treeviews_selection_entfernen_anbindung_foreach( SondTreeview* stv,
        GtkTreeIter* iter, gpointer data, gchar** errmsg )
{
    gint rc = 0;
    gint node_id = 0;
    gint fundstelle_id = 0;
    GtkTreeIter iter_src = { 0 };

    Projekt* zond = data;

    gtk_tree_model_get( gtk_tree_view_get_model( GTK_TREE_VIEW(stv) ), iter,
            2, &node_id, -1 );

    rc = zond_dbase_get_fundstelle( zond->dbase_zond->zond_dbase_work, node_id,
            &fundstelle_id, NULL, NULL, errmsg );
    if ( rc == -1 ) ERROR_S
    else if ( rc != 2 ) return 0; //Knoten ist keine Anbindung

    rc = zond_dbase_fundstelle_get_number_refs( zond->dbase_zond->zond_dbase_work,
            fundstelle_id, errmsg );
    if ( rc == -1 ) ERROR_S
    else if ( rc > 1 ) return 0; //fundstelle ist auch aus baum_auswertung angebunden

    while ( (gtk_tree_model_iter_children( gtk_tree_view_get_model( GTK_TREE_VIEW(zond->inhalt) ), &iter_src, iter )) )
    {
        rc = treeviews_knoten_verschieben( zond, &iter_src,
                ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(stv) )),
                iter, FALSE, NULL, errmsg );
        if ( rc ) ERROR_S
    }

    rc = zond_dbase_begin( zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_S

    rc = zond_dbase_remove_fundstelle( zond->dbase_zond->zond_dbase_work, fundstelle_id, errmsg );
    if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

    rc = zond_dbase_remove_node( zond->dbase_zond->zond_dbase_work, node_id, errmsg );
    if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

    rc = zond_dbase_commit( zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

    zond_tree_store_remove( iter );

    return 0;
}


//Funktioniert nur im BAUM_INHALT - Abfrage im cb schließt nur BAUM_FS aus
gint
treeviews_selection_entfernen_anbindung( Projekt* zond, gchar** errmsg )
{
    gint rc = 0;

    if ( zond->activ_treeview != zond->inhalt ) return 0;

    rc = sond_treeview_selection_foreach( SOND_TREEVIEW(zond->inhalt),
            treeviews_selection_entfernen_anbindung_foreach, zond, errmsg );
    if ( rc == -1 ) ERROR_S

    return 0;
}


typedef struct
{
    Projekt* zond;
    GArray* arr_fundstellen;
} CheckForCopy;

static gint
treeviews_check_for_copy( gint node_id, gint* ebene, CheckForCopy* check_for_copy, gchar** errmsg )
{
    gint rc = 0;
    gint fundstelle_id = 0;

    rc = zond_dbase_get_fundstelle( check_for_copy->zond->dbase_zond->zond_dbase_work, node_id,
            &fundstelle_id, NULL, NULL, errmsg );
    if ( rc == -1 ) ERROR_S
    else if ( rc == 0 ) return 0; //nichtangebunden, ok

    if ( fundstelle_id )
    {
        rc = zond_dbase_fundstelle_get_number_refs( check_for_copy->zond->dbase_zond->zond_dbase_work,
                fundstelle_id, errmsg );
        if ( rc == -1 ) ERROR_S
        else if ( rc > 1 ) return 1; //auch Anbindung aus baum_auswertung

        g_array_append_val( check_for_copy->arr_fundstellen, fundstelle_id );
    }

    return 0;
}


static gint
treeviews_selection_loeschen_foreach( SondTreeview* tree_view, GtkTreeIter* iter,
        gpointer data, gchar** errmsg )
{
    gint head_nr = 0;

    Projekt* zond = (Projekt*) data;

    //Nur "nomale" Knoten oder ...
    if ( !zond_tree_store_is_link( iter ) )
    {
        gint rc = 0;
        gint root_id = 0;
        gint node_id = 0;
        gboolean response = FALSE;

        //geht, weil iter nicht NULL sein kann
        gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), iter, 2, &node_id, -1 );

        root_id = zond_dbase_get_root_id( zond->dbase_zond->zond_dbase_work,
                node_id, errmsg );
        if ( root_id == -1 ) ERROR_S

        if ( root_id == 1 ) //baum inhalt - prüfen, ob node oder dessen Kinder mit Anbindungen verknüpft sind, die sich in anderen Bäumen befinden
        {
            CheckForCopy check_for_copy = { zond, 0 };

            check_for_copy.arr_fundstellen = g_array_new( FALSE, FALSE, sizeof( gint ) );

            rc = zond_dbase_walk_tree( zond->dbase_zond->zond_dbase_work,
                    node_id, NULL, (ZondDBaseWalkTreeForeachFunc) treeviews_check_for_copy, &check_for_copy, errmsg );
            if ( rc )
            {
                g_array_unref( check_for_copy.arr_fundstellen );
                if ( rc == -1 ) ERROR_S
                else if ( rc == 1 ) return 0;
            }
            rc = zond_dbase_begin( zond->dbase_zond->zond_dbase_work, errmsg );
            if ( rc ) ERROR_S

            rc = zond_dbase_remove_node( zond->dbase_zond->zond_dbase_work, node_id, errmsg );
            if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

            for ( gint i = 0; i < check_for_copy.arr_fundstellen->len; i++ )
            {
                gint fundstelle_id = 0;

                fundstelle_id = g_array_index( check_for_copy.arr_fundstellen, gint, i );
                rc = zond_dbase_remove_fundstelle( zond->dbase_zond->zond_dbase_work, fundstelle_id, errmsg );
                if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )
            }

            rc = zond_dbase_commit( zond->dbase_zond->zond_dbase_work, errmsg );
            if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )
        }
        else
        {
            rc = zond_dbase_remove_node( zond->dbase_zond->zond_dbase_work, node_id, errmsg );
            if ( rc ) ERROR_S
        }

        if ( node_id == zond->node_id_extra )
                g_signal_emit_by_name( s_selection->zond->textview_window,
                "delete-event", s_selection->zond, &response );

        zond_tree_store_remove( iter );
    }//... Gesamt-Links
    else if ( (head_nr = zond_tree_store_get_link_head_nr( iter )) )
    {
        gint rc = 0;

        rc = zond_dbase_remove_node( zond->dbase_zond->zond_dbase_work,
                head_nr, errmsg );
        if ( rc ) ERROR_S

        zond_tree_store_remove_link( iter );
    }
    //else: link, aber nicht head->nix machen

    return 0;
}


gint
treeviews_selection_loeschen( Projekt* zond, gchar** errmsg )
{
    gint rc = 0;

    rc = sond_treeview_selection_foreach( SOND_TREEVIEW(zond->activ_treeview),
            treeviews_selection_loeschen_foreach, zond, errmsg );
    if ( rc == -1 ) ERROR_S

    return 0;
}


typedef struct _S_Selection_Change_Icon
{
    Projekt* zond;
    const gchar* icon_name;
} SSelectionChangeIcon;

static gint
treeviews_selection_change_icon_foreach( SondTreeview* tree_view, GtkTreeIter* iter,
        gpointer data, gchar** errmsg )
{
    gint rc = 0;
    gint node_id = 0;
    SSelectionChangeIcon* s_selection = NULL;

    s_selection = data;

    //geht, weil iter nicht NULL sein kann
    gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), iter, 2, &node_id, -1 );

    rc = zond_dbase_update_node( s_selection->zond->dbase_zond->zond_dbase_work,
            node_id, s_selection->icon_name, NULL, NULL, 0, 0, errmsg );
    if ( rc ) ERROR_S

    //neuen icon_name im tree speichern
    zond_tree_store_set( iter, s_selection->icon_name, NULL, 0 );

    return 0;
}


gint
treeviews_selection_change_icon( Projekt* zond, const gchar* icon_name, gchar** errmsg )
{
    gint rc = 0;
    SSelectionChangeIcon s_selection = { zond, icon_name };

    rc = sond_treeview_selection_foreach( SOND_TREEVIEW(zond->activ_treeview),
            treeviews_selection_change_icon_foreach, (gpointer) &s_selection, errmsg );
    if ( rc == -1 ) ERROR_S

    return 0;
}


static gint
treeviews_selection_set_node_text_foreach( SondTreeview* stv, GtkTreeIter* iter,
        gpointer data, gchar** errmsg )
{
    gint rc = 0;
    gint node_id = 0;
    gchar* node_text = NULL;
    gchar* rel_path = NULL;
    Anbindung anbindung = { 0 };

    Projekt* zond = data;

    //geht, weil iter nicht NULL sein kann
    gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), iter, 2, &node_id, -1 );

    rc = zond_dbase_get_fundstelle( zond->dbase_zond->zond_dbase_work, node_id,
            NULL, &rel_path, &anbindung, errmsg );
    if ( rc == -1 ) ERROR_S
    if ( rc == 0 ) return 0;
    else if ( rc == 2 ) node_text = g_strdup_printf( "%s, S. %i (%i) - S. %i (%i)", rel_path,
                anbindung.von.seite, anbindung.von.index, anbindung.bis.seite,
                anbindung.bis.index );
    else node_text = g_strdup_printf( "%s", rel_path );

    g_free( rel_path );

    rc = zond_dbase_update_node( zond->dbase_zond->zond_dbase_work, node_id, 0,
            node_text, NULL, 0, 0, errmsg );
    if ( rc )
    {
        g_free( node_text );
        ERROR_S
    }

    //neuen text im tree speichern
    zond_tree_store_set( iter, NULL, node_text, 0 );

    g_free( node_text );

    return 0;
}

gint
treeviews_selection_set_node_text( Projekt* zond, gchar** errmsg )
{
    gint rc = 0;

    if ( zond->activ_treeview != zond->inhalt && zond->activ_treeview != zond->auswertung ) return 0;

    rc = sond_treeview_selection_foreach( SOND_TREEVIEW(zond->activ_treeview),
            treeviews_selection_set_node_text_foreach, zond, errmsg );
    if ( rc ) ERROR_S

    return 0;
}


gint
treeviews_insert_node( Projekt* zond, gboolean child, gchar** errmsg )
{
    gint node_id = 0;
    gint rc = 0;
    gint node_id_new = 0;
    GtkTreeIter iter = { 0 };
    GtkTreeIter* iter_anchor = NULL;
    GtkTreeIter new_iter = { 0 };
    gboolean success = FALSE;
    ZondTreeStore* tree_store = NULL;
    GtkWidget* treeview_target = NULL;

    if ( zond->activ_treeview != zond->inhalt &&
            zond->activ_treeview != zond->auswertung ) return 0;

    success = treeviews_get_anchor_treestore_and_iter( zond, &child, &tree_store, &iter );
    if ( success ) iter_anchor = &iter;
    node_id = treeviews_get_node_id( tree_store, iter_anchor );

    //child = TRUE; //, weil ja node_id schon der unmittelbare Vorfahre ist!
    if ( tree_store == ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(zond->inhalt) )) && success )
    {
        gint rc = 0;

        rc = treeviews_hat_vorfahre_datei( zond, iter_anchor, child, errmsg );
        if ( rc == -1 ) ERROR_S
        else if ( rc == 1 )
        {
            display_message( zond->app_window, "Einfügen als Unterpunkt von Datei nicht zulässig", NULL );

            return 1; //Abbruch ohne Fählermeldung
        }
    }

    rc = zond_dbase_begin( zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_S

    //Knoten in Datenbank einfügen
    node_id_new = zond_dbase_insert_node( zond->dbase_zond->zond_dbase_work,
            node_id, child, zond->icon[ICON_NORMAL].icon_name, "Neuer Punkt", NULL, 0, 0, errmsg );
    if ( node_id_new == -1 ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

    rc = zond_dbase_commit( zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_ROLLBACK( zond->dbase_zond->zond_dbase_work )

    //Knoten in baum_inhalt einfuegen
    zond_tree_store_insert( tree_store, iter_anchor, child, &new_iter );

    //Standardinhalt setzen
    zond_tree_store_set( &new_iter, zond->icon[ICON_NORMAL].icon_name, "Neuer Punkt", node_id_new );

    if ( ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(zond->inhalt) ))
            == zond_tree_store_get_tree_store( &new_iter ) )
            treeview_target = zond->inhalt;
    else treeview_target = zond->auswertung; //oben wurden zond->file_manager bereits ausgeschieden

    sond_treeview_expand_row( SOND_TREEVIEW(treeview_target), &new_iter );
    sond_treeview_set_cursor( SOND_TREEVIEW(treeview_target), &new_iter );

    return 0;
}

/*
static gint
treeviews_db_to_baum_links( Projekt* zond, gchar** errmsg )
{
    gint ID_start = 0;

    while ( 1 )
    {
        gint rc = 0;
        ZondTreeStore* tree_store = NULL;
        GtkTreeIter* iter_link = NULL;
        GtkTreeIter* iter_parent = NULL;
        gint node_id = 0;
        gint node_id_target = 0;
        GtkTreeIter* iter_target = NULL;
        gint older_sibling = 0;
        gint parent = 0;
        gint pos = 0;

        rc = zond_dbase_get_link( zond->dbase_zond->zond_dbase_work, &ID_start, &node_id,
            &project, &node_id_target, errmsg );
        if ( rc == -1 ) ERROR_S
        else if ( rc == 1 ) break;

        ID_start++;

        //"leeren" iter, der link werden soll, rauslöschen
        //erst herausfinden
        iter_link = zond_treeview_abfragen_iter( ZOND_TREEVIEW(zond->treeview[baum]), node_id );
        if ( !iter_link ) ERROR_S_MESSAGE( "zond_treeview_abfragen_iter (link) gibt NULL zurück" )

        tree_store = ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(zond->treeview[baum]) ));

        //dann löschen
        zond_tree_store_remove( iter_link );
        gtk_tree_iter_free( iter_link );

        //iter_target ermitteln
        iter_target = zond_treeview_abfragen_iter( ZOND_TREEVIEW(zond->treeview[baum_target]), node_id_target );
        if ( !iter_target ) ERROR_S_MESSAGE( "zond_treeview_abfragen_iter (target) gibt NULL zurück" )

        //iter wo link hinkommt ermitteln (iter_dest
        //zuerst iter_parent
        parent = zond_dbase_get_parent( zond->dbase_zond->zond_dbase_work, baum, node_id, errmsg );
        if ( parent < 0 )
        {
            gtk_tree_iter_free( iter_target );
            ERROR_S
        }
        // else if ( parent == 0 ) -> überflüssig, da iter_parent dann = NULL
        else if ( parent > 0 )
        {
            iter_parent = zond_treeview_abfragen_iter( ZOND_TREEVIEW(zond->treeview[baum]), parent );
            if ( !iter_parent )
            {
                gtk_tree_iter_free( iter_target );
                ERROR_S_MESSAGE( "zond_treeview_abfragen_iter gibt NULL zurück (I)" )
            }
        }

        //jetzt pos
        rc = zond_dbase_get_node( zond->dbase_zond->zond_dbase_work, node_id,
                NULL, &older_sibling, NULL, NULL, NULL, NULL, NULL, errmsg );
        if ( rc )
        {
            gtk_tree_iter_free( iter_target );
            if ( iter_parent ) gtk_tree_iter_free( iter_parent );
            ERROR_S
        }
        // else if ( older_sibling == 0 ) //erstes Kind -> pos = 0
        else if ( older_sibling > 0 )
        {
            gint noch_olderer_sibling = 0;

            do
            {
                gint rc = 0;

                pos++;
                rc = zond_dbase_get_node(
                        zond->dbase_zond->zond_dbase_work, older_sibling, NULL,
                        &noch_olderer_sibling, NULL, NULL, NULL, NULL, NULL, errmsg );
                if ( rc ) ERROR_S
            }
            while ( (older_sibling = noch_olderer_sibling) );
        }

        zond_tree_store_insert_link_at_pos( iter_target->user_data, node_id,
                tree_store, iter_parent, pos + 1, NULL );

        gtk_tree_iter_free( iter_target );
        if ( iter_parent ) gtk_tree_iter_free( iter_parent );

    }

    return 0;
}
*/


gint
treeviews_db_to_baum( gint node_id, gint* ebene, DbToBaum* db_to_baum, gchar** errmsg )
{
    gint rc = 0;
    gchar* icon_name = NULL;
    gchar* node_text = NULL;
    gint type = 0;
    gint ebene_dif = 0;
    gboolean child = FALSE;

    if ( node_id == db_to_baum->root_id )
    {
        db_to_baum->ebene_vorher++;
        return 0;
    }

    rc = zond_dbase_get_node( db_to_baum->zond->dbase_zond->zond_dbase_work, node_id, NULL,
            NULL, &icon_name, &node_text, NULL, NULL, &type, errmsg );
    if ( rc == -1 ) ERROR_S
    else if ( rc == 1 ) ERROR_S_MESSAGE( "node_id existiert nicht" )

    //Anchor-Iter bestimmen
    if ( db_to_baum->anchor_iter )
    {
        ebene_dif = db_to_baum->ebene_vorher - *ebene;

        for ( gint i = 0; i < ebene_dif; i++ )
        {
            GtkTreeIter iter = { 0 };

            if ( !gtk_tree_model_iter_parent(
                    GTK_TREE_MODEL(zond_tree_store_get_tree_store(
                    db_to_baum->anchor_iter )), &iter, db_to_baum->anchor_iter ) )
                    ERROR_S_MESSAGE( "parent-iter kann nicht ermittelt werden" )

            db_to_baum->iter_new = iter;
        }

        if ( ebene_dif < 0 ) child = TRUE; //vorspringen->Kind
    }

    //neuen Knoten einfügen
    zond_tree_store_insert( ZOND_TREE_STORE(gtk_tree_view_get_model(
            GTK_TREE_VIEW(db_to_baum->treeview) )), db_to_baum->anchor_iter,
            child, &(db_to_baum->iter_new) );

    //Daten rein
    zond_tree_store_set( &(db_to_baum->iter_new), icon_name, node_text, node_id );

    g_free( icon_name );
    g_free( node_text );

    db_to_baum->anchor_iter = &(db_to_baum->iter_new); //falls anchor_iter == NULL war
    db_to_baum->ebene_vorher = *ebene;

    return 0;
}


static gint
treeviews_reload_baum( Projekt* zond, GtkWidget* treeview, gint root_node, gchar** errmsg )
{
    gint rc = 0;
    gint ebene = 0;
    DbToBaum db_to_baum = { zond, treeview, root_node, 0, NULL, { 0 } };

    zond_tree_store_clear( ZOND_TREE_STORE(gtk_tree_view_get_model(
            GTK_TREE_VIEW(treeview) )) );

    rc = zond_dbase_walk_tree( zond->dbase_zond->zond_dbase_work, root_node,
            &ebene, (ZondDBaseWalkTreeForeachFunc) treeviews_db_to_baum, &db_to_baum, errmsg );
    if ( rc ) ERROR_S

    return 0;
}


gint
treeviews_reload_baeume( Projekt* zond, gchar** errmsg )
{
    gint rc = 0;
    GtkTreeIter iter = { 0 };

    rc = treeviews_reload_baum( zond, zond->inhalt, 1, errmsg );
    if ( rc ) ERROR_S

    rc = treeviews_reload_baum( zond, zond->auswertung, 2, errmsg );
    if ( rc ) ERROR_S

    g_object_set( sond_treeview_get_cell_renderer_text( SOND_TREEVIEW(zond->auswertung) ),
            "editable", FALSE, NULL);
    g_object_set( sond_treeview_get_cell_renderer_text( SOND_TREEVIEW(zond->inhalt) ),
            "editable", TRUE, NULL);

    gtk_widget_grab_focus( zond->inhalt );

    if ( gtk_tree_model_get_iter_first( gtk_tree_view_get_model(
            GTK_TREE_VIEW(zond->auswertung) ), &iter ) )
    {
        sond_treeview_set_cursor( SOND_TREEVIEW(zond->auswertung), &iter );
        gtk_tree_selection_unselect_all( gtk_tree_view_get_selection( GTK_TREE_VIEW(zond->auswertung) ) );
    }

    return 0;
}


//FALSE, falls iter nicht gesetzt werden konnte
gboolean
treeviews_get_anchor_treestore_and_iter( Projekt* zond, gboolean* child, ZondTreeStore** tree_store, GtkTreeIter* iter )
{
    GtkTreeIter iter_cursor = { 0, };

    if ( !sond_treeview_get_cursor( SOND_TREEVIEW(zond->activ_treeview), &iter_cursor ) )
    {
        *child = TRUE;
        if ( tree_store ) *tree_store =
                ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(zond->activ_treeview) ));

        return FALSE;
    }

    if ( zond_tree_store_is_link( &iter_cursor ) )
    {
        gint head_nr = 0;

        head_nr = zond_tree_store_get_link_head_nr( &iter_cursor );
<<<<<<< HEAD

        if ( !head_nr || *child ) zond_tree_store_get_target( &iter_cursor, iter );
        else *iter = iter_cursor;
=======
>>>>>>> 1dc3db5 (links angeklemmt; BugFix Parameter zond_tree_store)

    }
    else *iter = iter_cursor;

    if ( tree_store ) *tree_store = zond_tree_store_get_tree_store( iter );

    return TRUE;
}


typedef struct {
    Projekt* zond;
    ZondTreeStore* tree_store_anchor;
    GtkTreeIter* iter_anchor;
    GtkTreeIter* iter_cur;
    gboolean kind;
} SSelection;


static gint
treeviews_paste_clipboard_as_link_foreach( SondTreeview* tree_view, GtkTreeIter* iter, gpointer data, gchar** errmsg )
{
    gint node_new = 0;
    gint node_id = 0;
    gint anchor_id = 0;

    SSelection* s_selection = (SSelection*) data;

    //node ID, auf den link zeigen soll
    gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), iter, 2, &node_id, -1 );

    anchor_id = treeviews_get_node_id( s_selection->tree_store_anchor, s_selection->iter_anchor );

    node_new = zond_dbase_insert_node( s_selection->zond->dbase_zond->zond_dbase_work,
            anchor_id, s_selection->kind, NULL, NULL, NULL, node_id, REF_TYPE_NODE_ID, errmsg );
    if ( node_new < 0 ) ERROR_S

    zond_tree_store_insert_link( iter, node_new, s_selection->tree_store_anchor,
            s_selection->iter_anchor, s_selection->kind, s_selection->iter_cur );

    s_selection->iter_anchor = s_selection->iter_cur; //
    s_selection->kind = FALSE;

    return 0;
}


//Ziel ist immer BAUM_AUSWERTUNG
gint
treeviews_paste_clipboard_as_link( Projekt* zond, ZondTreeStore* tree_store_anchor, GtkTreeIter* iter_anchor,
        gboolean kind, gchar** errmsg )
{
    gint rc = 0;
    GtkTreeIter iter_cur = { 0 };

    SSelection s_selection = { zond, tree_store_anchor, iter_anchor, &iter_cur, kind };

    rc = sond_treeview_clipboard_foreach( SOND_TREEVIEW(zond->activ_treeview),
            treeviews_paste_clipboard_as_link_foreach, &s_selection, errmsg );
    if ( rc == -1 ) ERROR_S

    return 0;
}


static gint
treeviews_clipboard_kopieren_foreach( SondTreeview* tree_view, GtkTreeIter* iter, gpointer data, gchar** errmsg )
{
    gint rc = 0;
    gint node_id = 0;
    gint anchor_id = 0;
    gint new_node_id = 0;

    SSelection* s_selection = (SSelection*) data;

    gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), iter, 2, &node_id, -1 );

    anchor_id = treeviews_get_node_id( s_selection->tree_store_anchor, s_selection->iter_anchor );

    rc = zond_dbase_begin( s_selection->zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_S

    new_node_id = zond_dbase_copy_node( s_selection->zond->dbase_zond->zond_dbase_work,
            node_id, anchor_id, s_selection->kind, errmsg );
    if ( new_node_id == -1 ) ERROR_ROLLBACK( s_selection->zond->dbase_zond->zond_dbase_work )

    zond_tree_store_copy_node( iter, s_selection->tree_store_anchor,
            s_selection->iter_anchor, s_selection->kind, s_selection->iter_cur );

    rc = zond_dbase_commit( s_selection->zond->dbase_zond->zond_dbase_work, errmsg );
    if ( rc ) ERROR_ROLLBACK( s_selection->zond->dbase_zond->zond_dbase_work )

    s_selection->iter_anchor = s_selection->iter_cur;
    s_selection->kind = FALSE;

    return 0;
}


gint
treeviews_clipboard_kopieren( Projekt* zond, ZondTreeStore* tree_store_anchor,
        GtkTreeIter* iter_anchor, gboolean kind, gchar** errmsg )
{
    gint rc = 0;
    GtkTreeIter iter_cur = { 0 };

    SSelection s_selection = { zond, tree_store_anchor, iter_anchor, &iter_cur, kind };

    rc = sond_treeview_clipboard_foreach( SOND_TREEVIEW(zond->activ_treeview),
            treeviews_clipboard_kopieren_foreach, &s_selection, errmsg );
    if ( rc == -1 ) ERROR_S

    return 0;
}


static gint
treeeviews_clipboard_verschieben_foreach( SondTreeview* tree_view,
        GtkTreeIter* iter, gpointer data, gchar** errmsg )
{
    gint rc = 0;
    ZondTreeStore* treestore_target = NULL;
    GtkTreeIter iter_target = { 0 };
    gint node_id = 0;

    SSelection* s_selection = (SSelection*) data;

    gtk_tree_model_get( GTK_TREE_MODEL(zond_tree_store_get_tree_store( iter )), iter, 2, &node_id, -1 );

    zond_tree_store_get_target( iter, &iter_target );
    treestore_target = zond_tree_store_get_tree_store( &iter_target );

    if ( treestore_target == ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(s_selection->zond->inhalt) )) ) //Quelle aus baum_inhalt
    {
        if ( s_selection->tree_store_anchor ==
                ZOND_TREE_STORE(gtk_tree_view_get_model( GTK_TREE_VIEW(s_selection->zond->inhalt) )) )
        { //Ziel baum_inhalt -> dann nicht Anbindung verschieben
            gint rc = 0;

            rc = zond_dbase_get_fundstelle( s_selection->zond->dbase_zond->zond_dbase_work,
                    node_id, NULL, NULL, NULL, errmsg );
            if ( rc == -1 ) ERROR_S
            else if ( rc == 0 ) return 0;
        }
        else return 0; //verschieben aus baum_inhalt heraus sowieso nicht!
    }

    rc = treeviews_knoten_verschieben( s_selection->zond, iter,
            s_selection->tree_store_anchor, s_selection->iter_anchor,
            s_selection->kind, s_selection->iter_cur, errmsg );
    if ( rc ) ERROR_S

    s_selection->iter_anchor = s_selection->iter_cur; //
    s_selection->kind = FALSE;

    return 0;
}


//Ist immer verschieben innerhalb des Baums
gint
treeviews_clipboard_verschieben( Projekt* zond, ZondTreeStore* treeview_anchor,
        GtkTreeIter* iter_anchor, gboolean kind, gchar** errmsg )
{
    gint rc = 0;
    Clipboard* clipboard = NULL;
    GtkTreeIter iter_cur = { 0 };

    SSelection s_selection = { zond, treeview_anchor, iter_anchor, &iter_cur, kind };

    rc = sond_treeview_clipboard_foreach( SOND_TREEVIEW(zond->activ_treeview),
            treeeviews_clipboard_verschieben_foreach, &s_selection, errmsg );
    if ( rc == -1 ) ERROR_S

    //Alte Auswahl löschen
    clipboard = sond_treeview_get_clipboard( SOND_TREEVIEW(zond->activ_treeview) );
    if ( clipboard->arr_ref->len > 0 ) g_ptr_array_remove_range( clipboard->arr_ref,
            0, clipboard->arr_ref->len );

    gtk_widget_queue_draw( GTK_WIDGET(zond->activ_treeview) );

    return 0;
}


